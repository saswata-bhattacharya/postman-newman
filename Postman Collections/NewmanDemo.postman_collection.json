{
	"info": {
		"_postman_id": "3c2ab219-af92-4179-aafe-98c4c858a307",
		"name": "Newman Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Setup Test Framework",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setGlobalVariable('describe-it-test-script', responseBody);",
									"",
									"eval(postman.getGlobalVariable(\"describe-it-test-script\"));",
									"tests['test framework ready'] = (typeof describe === 'function');",
									"",
									"var api_url=null;",
									"api_url= pm.environment.get(\"api_url\");",
									"",
									"console.log (api_url);",
									"",
									"if(api_url == \"https://dev.scvapi.pandora.net\"){",
									"    pm.environment.set(\"Release_Version\", \"1.1\");",
									"    console.log (\"Set 1.1\");",
									"}",
									"else if (api_url == \"https://test.scvapi.pandora.net\"){",
									"     pm.environment.set(\"Release_Version\", \"1.1\");",
									"     console.log (\"Set 1.1\");",
									"}",
									"",
									"else if (api_url == \"https://uat.scvapi.pandora.net\") {",
									"     pm.environment.set(\"Release_Version\", \"1.0\");",
									"     console.log (\"Set 1.0\");",
									"}",
									"",
									"console.log(\"Release Version ->\", pm.environment.get(\"Release_Version\"));"
								],
								"type": "text/javascript",
								"id": "c37fdbb9-f2f9-4a51-9dd0-bc98ea4e0bd2"
							}
						}
					],
					"id": "42a2a2d8-6cc6-4d9a-b8d4-9cb70ffe7fd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "https://gist.githubusercontent.com/MrMatt57/a8b2e343664bd9b50bc62fac3dd00b86/raw/92a19f3c0f1722e4d893e34d313b6cc4dde000b6/describe-it.js"
					},
					"response": []
				}
			],
			"id": "a05b44db-3cc6-4a8c-95bc-d0cde3bfec68"
		},
		{
			"name": "Generate Auth Token",
			"item": [
				{
					"name": "AuthTokenGeneration ( Set Token )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();\r",
									"pm.environment.set(\"token\", response.access_token);\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token type is Bearer and Access Token has generated succesfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token_type).to.eql(\"Bearer\");\r",
									"    pm.expect(jsonData.access_token).to.be.not.null;\r",
									"});"
								],
								"type": "text/javascript",
								"id": "33bf925d-bba7-44ee-874e-ac47257f2270"
							}
						}
					],
					"id": "2e5c3559-14b6-4d73-9e10-e6e0e4fa0aba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded",
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{resource}}",
									"type": "text"
								}
							]
						},
						"url": "https://login.microsoftonline.com/656793e6-d51d-4bb2-b5fa-c66ddd181a40/oauth2/token"
					},
					"response": []
				}
			],
			"id": "2b7de274-d815-44c9-a6f9-f536b45c0325",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "cbafae86-a1c9-4190-b7cd-63f9c00bc2a7"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c7a261c3-124f-4aa3-bcd5-9fdfc30a10a9"
					}
				}
			]
		},
		{
			"name": "Initialize Environment",
			"item": [
				{
					"name": "Init Terms & Purchase & Preferred",
					"item": [
						{
							"name": "Set Terms And Conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Total Count should be greater than 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let tcid;\r",
											"for(let val of jsonData.values){\r",
											"    postman.setEnvironmentVariable(\"newT&Cid\",val.id);\r",
											"    break;\r",
											"\r",
											"}\r",
											"console.log(\"T&C = \" + pm.environment.get(\"newT&Cid\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "292742f9-68dd-4eae-9b74-cf830f74e4fb"
									}
								}
							],
							"id": "2ad0a90e-1e5e-439b-bd6e-bd7731612edd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{api_url}}/api/v{{ApiVersion}}/TermsAndConditions"
							},
							"response": []
						},
						{
							"name": "Set Preferred Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Total Count should be greater than 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let pc;\r",
											"for(let val of jsonData.values){\r",
											"   postman.setEnvironmentVariable(\"newPreferredCategory\",val.name);\r",
											"    break;\r",
											"}\r",
											"\r",
											"console.log(\"New created Preferred Category is - \"+pm.environment.get(\"newPreferredCategory\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "3b883ff7-de06-4bdc-8791-68b65b112055"
									}
								}
							],
							"id": "d8917cef-f22a-4871-b52c-06cb56267d42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{api_url}}/api/v{{ApiVersion}}/PreferredCategory"
							},
							"response": []
						},
						{
							"name": "Set Preferred Metal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Total Count should be greater than 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let metal;\r",
											"for(let val of jsonData.values){\r",
											"     postman.setEnvironmentVariable(\"newMetal\",val.name);\r",
											"    break;\r",
											"}\r",
											"\r",
											"console.log(pm.environment.get(\"newMetal\"));"
										],
										"type": "text/javascript",
										"id": "b3f6ddfb-5fa8-401b-ba9f-42161741cdf7"
									}
								}
							],
							"id": "009689b8-4ddb-41bc-9ee9-733865cf503f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{api_url}}/api/v{{ApiVersion}}/metal"
							},
							"response": []
						},
						{
							"name": "Set Purchase Reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Total Count should be greater than 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let pr;\r",
											"for(let val of jsonData.values){\r",
											"    postman.setEnvironmentVariable(\"newPurchaseReason\",val.name);\r",
											"    break;\r",
											"}\r",
											"\r",
											"console.log(\"Purchase Reason is - \"+pm.environment.get(\"newPurchaseReason\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "9e48c1dc-06f8-428a-bd1c-fe02186e2c36"
									}
								}
							],
							"id": "8b1c5acc-9442-44ca-8148-b90439f1f634",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{api_url}}/api/v{{ApiVersion}}/purchasereason"
							},
							"response": []
						}
					],
					"id": "ae118d16-b96d-46d9-81a9-69bb33855b70"
				}
			],
			"id": "7f034b5f-2ba2-448a-8e3e-1cccc6e2badf"
		},
		{
			"name": "Enroll & Tier up ( PINK - SILVER )",
			"item": [
				{
					"name": "Consumer",
					"item": [
						{
							"name": "Create New Consumer - minimum required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "872eab9b-7932-4e5d-b1cd-26458202c00a",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));\r",
											"\r",
											"const response=pm.response.json();\r",
											"pm.environment.set(\"McID\",response.id);\r",
											"\r",
											"describe(\"POST Consumer full request, response\", function() {\r",
											"    it(\"must return 201 status code\", function() {\r",
											"       expect(responseCode.code).toEql(201);\r",
											"    });\r",
											"    \r",
											"    it(\"must return location header\", function() {\r",
											"        locationHeader = responseHeaders['Location'];\r",
											"        expect(locationHeader).toBeOk();\r",
											"    });\r",
											"    \r",
											"    if(locationHeader){\r",
											"        describe(\"location header\", function () {\r",
											"            lastSlash = locationHeader.lastIndexOf('/');\r",
											"            \r",
											"            it(\"must have a api path\", function () {\r",
											"                apiRoute = locationHeader.substring(0, lastSlash);\r",
											"                expect(apiRoute).toEql('/api/v' + postman.getEnvironmentVariable(\"ApiVersion\") + '/consumer');\r",
											"            });\r",
											"            it(\"must include new customer id\", function () {\r",
											"                newConsumerId = locationHeader.substring(lastSlash + 1);\r",
											"                expect(newConsumerId).toBeOk();\r",
											"            });        \r",
											"        });  \r",
											"    }\r",
											"\r",
											"    \r",
											"    \r",
											"    it(\"must be a valid JSON\", function () {\r",
											"        responseJSON = JSON.parse(responseBody);\r",
											"        expect(typeof responseJSON).toBe(\"object\");\r",
											"    });\r",
											"    \r",
											"    it(\"property id must have a value\", function () {\r",
											"        expect(responseJSON.id).toBeOk();\r",
											"    });   \r",
											"    \r",
											"    it(\"property email must have a value\", function () {\r",
											"        expect(responseJSON.emailAddress).toBeOk();\r",
											"    });    \r",
											"    \r",
											"    testResults = function(propertyName, propertyValue) {\r",
											"        it(\"property \" + propertyName + \" values must match\", function () {\r",
											"            expect(responseJSON[propertyName]).toEql(propertyValue);\r",
											"        });\r",
											"    };\r",
											"    \r",
											"    testResults(\"firstName\", \"bob\");\r",
											"    testResults(\"lastName\", \"smith\");\r",
											"    testResults(\"country\", \"FR\");\r",
											"    testResults(\"emailOptCurrentStatus\", true);\r",
											"    testResults(\"emailDoubleOptInStatus\", \"Received\");\r",
											"    testResults(\"mobileOptCurrentStatus\", true);\r",
											"    testResults(\"mobileDoubleOptInStatus\", \"Received\");\r",
											"    testResults(\"directMailOptCurrentStatus\", true);\r",
											"    testResults(\"directMailDoubleOptInStatus\", \"Received\");;\r",
											"    testResults(\"telephoneOptCurrentStatus\", true);\r",
											"    testResults(\"telephoneDoubleOptInStatus\", \"Received\");\r",
											"    testResults(\"faxOptCurrentStatus\", true);\r",
											"    testResults(\"faxDoubleOptInStatus\", \"Received\");\r",
											"    testResults(\"vipNumber\", null);\r",
											"    testResults(\"loyaltyPoints\", null);\r",
											"    testResults(\"loyaltyTier\", null);\r",
											"    testResults(\"loyaltyPointsExpiryDate\", null);\r",
											"    testResults(\"nextLoyaltyTier\", null);\r",
											"    testResults(\"pointsToNextTier\", null);\r",
											"    testResults(\"previousLoyaltyTier\", null);\r",
											"    testResults(\"lastBirthdayDiscountRedemptionDate\", null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6ecb010-9374-4b65-8a5a-96ebc0eda35b",
										"exec": [
											"\r",
											"function setRandomConEmail(){\r",
											"const conEmail=\"testLoyalty\"+parseInt(Math.random()*1000000)+\"@spamhereplease.com\";\r",
											"console.log(conEmail);\r",
											"return conEmail;\r",
											"}\r",
											"\r",
											"postman.setEnvironmentVariable(\"newConsumerEmail\",setRandomConEmail());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cca008e8-1117-4d22-a9b8-3e7b9fdf1fcb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-return-data",
										"value": "all",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"bob\",\r\n    \"lastName\": \"smith\",\r\n    \"emailAddress\": \"{{newConsumerEmail}}\",\r\n    \"country\": \"FR\",\r\n    \"gender\": \"Male\",\r\n    \"lastModifiedSource\": \"Estore\",\r\n    \"sourceId\": \"CRM-SRCID-000000000088\",\r\n    \"emailOptCurrentStatus\": true,\r\n    \"emailDoubleOptInStatus\": \"Received\",\r\n    \"mobileOptCurrentStatus\": true,\r\n    \"mobileDoubleOptInStatus\": \"Received\",\r\n    \"directMailOptCurrentStatus\": true,\r\n    \"directMailDoubleOptInStatus\": \"Received\",\r\n    \"telephoneOptCurrentStatus\": true,\r\n    \"telephoneDoubleOptInStatus\": \"Received\",\r\n    \"faxOptCurrentStatus\": true,\r\n    \"faxDoubleOptInStatus\": \"Received\"\r\n}"
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer"
							},
							"response": []
						},
						{
							"name": "GET Consumer details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Consumer details & Consent validation\r",
											"let jsonData=pm.response.json();\r",
											"\r",
											"//Consumer details & Consent validation\r",
											"pm.test(\"Firstname Validation\",function(){\r",
											"    pm.expect(jsonData.firstName).to.eql(\"bob\");\r",
											"})\r",
											"pm.test(\"Lastname Validation\",function(){\r",
											"     pm.expect(jsonData.lastName).to.eql(\"smith\");\r",
											"})\r",
											"pm.test(\"email address Validation\",function(){\r",
											"     pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"newConsumerEmail\"));\r",
											"})\r",
											"pm.test(\"Country Validation\",function(){\r",
											"     pm.expect(jsonData.country).to.eql(\"FR\");\r",
											"})\r",
											"pm.test(\"Gender Validation\",function(){\r",
											"     pm.expect(jsonData.gender).to.eql(\"Male\");\r",
											"})\r",
											"pm.test(\"Lastmodified source Validation\",function(){\r",
											"     pm.expect(jsonData.lastModifiedSource).to.eql(\"EStore\");\r",
											"})\r",
											"pm.test(\"Consumer consent Validation\",function(){\r",
											"     pm.expect(jsonData.emailOptCurrentStatus).to.eql(true);\r",
											"    pm.expect(jsonData.mobileOptCurrentStatus).to.eql(true);\r",
											"    pm.expect(jsonData.directMailOptCurrentStatus).to.eql(true);\r",
											"    pm.expect(jsonData.telephoneOptCurrentStatus).to.eql(true);\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "711e7e38-46c4-472d-b1d4-20a009f805b5"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "a1d2bc7c-6a56-4bfd-9ff8-fa6b6c33a70e"
									}
								}
							],
							"id": "cd51b486-4ace-40d2-9c27-f02584dfeaae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-return-data",
										"value": "all",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}"
							},
							"response": []
						}
					],
					"id": "00affd8c-2c6d-4586-9aec-1d7dc47b0563"
				},
				{
					"name": "Consumer Terms and Conditions",
					"item": [
						{
							"name": "Accept Consumer Terms and Conditions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e017f689-5780-46ed-9f0e-cc34dd0c3748",
										"exec": [
											"console.log(\"New Terms and Conditions ID is - \"+pm.environment.get(\"newT&Cid\"));\r",
											"setTimeout(function(){},2000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7391ef7a-e4e5-4675-aaa3-213b7ba977b3",
										"exec": [
											"\r",
											"\r",
											"// pm.test(\"Successful POST request\", function () {\r",
											"//     pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Status code is 201 - Customer has accepted the New Terms & Conditions successfully\", function () {\r",
											"//     pm.response.to.have.status(201);\r",
											"// });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b795ed07-1e80-48dd-80e0-73a4c91f207a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-return-data",
										"type": "text",
										"value": "all",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"termsAndConditionsId\": \"{{newT&Cid}}\"\r\n} "
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/TermsAndConditions"
							},
							"response": []
						},
						{
							"name": "Get Consumer Terms and Conditions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript",
										"id": "f32bd95f-85d9-4a4e-8867-a188c16a72db"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let tcid,tcDate;\r",
											"for(let val of jsonData.values){\r",
											"    if(val.termsAndConditionsId==(pm.environment.get(\"newT&Cid\"))){\r",
											"        tcid=val;\r",
											"        tcDate=val.termCreationDate;\r",
											"    }\r",
											"}\r",
											"console.log(tcid);\r",
											"pm.test(\"Consumer's accepted T&C is matching with retrieved details\", function () {\r",
											"    pm.expect(tcid.termsAndConditionsId).to.eql(pm.environment.get(\"newT&Cid\"));\r",
											"});\r",
											"\r",
											"//Set Consumer T & C Acceptance Timestamp\r",
											"    \r",
											"    var date = new Date(tcDate);\r",
											"    console.log(date);\r",
											"    let conAcceptanceDate = date.toUTCString();\r",
											"    console.log(\"Timestamp Consumer accepted Terms and Conditions - \", conAcceptanceDate);\r",
											"    \r",
											"pm.environment.set(\"enrollTimeStamp\", conAcceptanceDate);\r",
											"\r",
											"// console.log(pm.environment.get(\"enrollTimeStamp\"));\r",
											""
										],
										"type": "text/javascript",
										"id": "39463ccc-0159-4c72-b30e-07e2cecbd475"
									}
								}
							],
							"id": "e078af1f-0902-4ba6-b49e-6317dd7a06d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/TermsAndConditions"
							},
							"response": []
						}
					],
					"id": "e6b71f69-4f36-4896-b189-28e833cad4fc"
				},
				{
					"name": "After Enrollment - Loyalty Profile",
					"item": [
						{
							"name": "After Enrollment- Loyalty Points and Tiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "215658d3-9061-4028-9789-68ffd6d24127",
										"exec": [
											"// eval(postman.getGlobalVariable(\"describe-it-test-script\"));\r",
											"\r",
											"// const response=pm.response.json();\r",
											"\r",
											"// describe(\"After Enrollment in Loyalty, response\", function() {\r",
											"//     it(\"must return 200 status code\", function() {\r",
											"//        expect(responseCode.code).toEql(200);\r",
											"//     });\r",
											"//     it(\"must be a valid JSON\", function () {\r",
											"//         responseJSON = JSON.parse(responseBody);\r",
											"//         expect(typeof responseJSON).toBe(\"object\");\r",
											"//     });    \r",
											"//     it(\"property masterConsumerId must have a value\", function () {\r",
											"//         expect(responseJSON.masterConsumerId).toBeOk();\r",
											"//     });   \r",
											"//     it(\"property email must have a value\", function () {\r",
											"//         expect(responseJSON.email).toBeOk();\r",
											"//     }); \r",
											"  \r",
											"    \r",
											"//         testResults = function(propertyName, propertyValue) {\r",
											"//         it(\"property \" + propertyName + \" values must match\", function () {\r",
											"//             expect(responseJSON[propertyName]).toEql(propertyValue);\r",
											"//         });\r",
											"//     };\r",
											"\r",
											"// //Validate Member Details \r",
											"\r",
											"//     testResults(\"masterConsumerId\", pm.environment.get(\"McID\"));\r",
											"//     testResults(\"memberStatus\", \"Active\");\r",
											"//     testResults(\"country\", \"FR\");\r",
											"//     testResults(\"firstName\", \"bob\");\r",
											"//     testResults(\"lastName\", \"smith\");\r",
											"//     testResults(\"email\", pm.environment.get(\"newConsumerEmail\"));\r",
											"\r",
											"// // Validate that data capture questions is not answered\r",
											"//     testResults(\"consumerType\", null);\r",
											"//     testResults(\"metalPreference\", null);\r",
											"//     testResults(\"categoryPreference\", null);\r",
											"//     testResults(\"birthdayDay\", null);;\r",
											"//     testResults(\"birthdayMonth\", null);\r",
											"//     testResults(\"birthdayYear\", null);\r",
											"//     testResults(\"myStoreId\", null);\r",
											"  \r",
											"//  });   \r",
											"\r",
											"// testResults2 = function(propertyName, propertyValue) {\r",
											"//         it(\"property \" + propertyName + \" values must match\", function () {     \r",
											"//             expect(propertyName).toEql(propertyValue);\r",
											"//         });\r",
											"//     };\r",
											"\r",
											"// //Tier Level and Account details validation\r",
											"\r",
											"//     let account= response.accountBalance;\r",
											"\r",
											"//         it(\"Account Balance should be an Object\", function () {\r",
											"//             expect(typeof account).toBe(\"object\");\r",
											"//         }); \r",
											"\r",
											"//         testResults2(response.accountBalance.tierLevel, \"Pink\");\r",
											"//         testResults2(response.accountBalance.pendingPoints, 0.0);\r",
											"//         testResults2(response.accountBalance.availablePoints, 0.0);\r",
											"//         testResults2(response.accountBalance.conversionAmount, 0.00);\r",
											"\r",
											"// //Voucher validation for PINK member\r",
											"\r",
											"// let voucherid,expDt, issueDt, redeemDate,usesLeft,pointEarningMul, discPercent, isActive, validity, applicability;\r",
											"\r",
											"//         for(let val of response.vouchers){\r",
											"//             if(val.name == \"FreeJewelryCleaningInStore_FR\"){\r",
											"//                     voucherid=val.id;\r",
											"//                     console.log(\"FreeJewelryCleaningInStore voucher is available -> \", voucherid);\r",
											"                                       \r",
											"//                     pm.test(\"FreeJewelryCleaningInStore is valid for Lifetime\", function () {\r",
											"//                         expDt=val.expiryDate;\r",
											"                    \r",
											"//                         expDt= new Date(val.expiryDate);\r",
											"//                         expYear=expDt.getFullYear();\r",
											"//                         console.log (expYear);\r",
											"\r",
											"//                         pm.expect(expYear).to.eql(2100);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore is not yet redeemed for a PINK Consumer\", function () {\r",
											"//                         redeemDate =val.redeemDate;\r",
											"//                         pm.expect(redeemDate).to.eql(null);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore can be used Multiple Times - Uses Left Validation\", function () {\r",
											"//                         usesLeft =val.usesLeft;\r",
											"//                         pm.expect(usesLeft).to.eql(999999999);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore should Active after Enrollment\", function () {\r",
											"//                         isActive =val.isActive;\r",
											"//                         pm.expect(isActive).to.eql(true);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore should applicable at stores only\", function () {\r",
											"//                         applicability =val.applicableIn;\r",
											"//                         pm.expect(applicability).to.eql(\"InStore\");              \r",
											"//                     });\r",
											"//             };\r",
											"//         };\r",
											"// // Member Profile available arrays validation after Enrollment\r",
											"\r",
											"// //   pm.test(\"Validate Voucher Array is  empty\", () => {\r",
											"// //         pm.expect(response.vouchers).to.be.empty;\r",
											"// //     });\r",
											"//     pm.test(\"Validate Transaction array for new enrolled member\", () => {\r",
											"//         //errors array is empty\r",
											"//     pm.expect(response.transactions).to.be.empty;\r",
											"//     });\r",
											"//     pm.test(\"Validate Points array for new enrolled member\", () => {\r",
											"//         //errors array is empty\r",
											"//     pm.expect(response.points).to.be.empty;\r",
											"//     });\r",
											"\r",
											"//     var enrollDate = response.enrollDate;\r",
											"//     // console.log(enrollDate);\r",
											"//     // var dateStr = JSON.parse(response.enrollDate);  \r",
											"//     // console.log(dateStr);\r",
											"//     var date = new Date(enrollDate);\r",
											"//     var dateStr = date.toUTCString();\r",
											"//     console.log(dateStr);\r",
											"\r",
											"//     //Validate that enrollment timestamp is matching with T&C acceptance timestamp\r",
											"\r",
											"//     let enrollTimeStamp = pm.environment.get(\"enrollTimeStamp\");\r",
											"//     console.log(enrollTimeStamp);\r",
											"    \r",
											"//     pm.test (\"Enrollment Timestamp Validation - \"+ dateStr, function () {\r",
											"//     pm.expect((dateStr).match(enrollTimeStamp));\r",
											"//    } )\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5882dcbd-bdc2-424e-9abd-9a1dfcca8654",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "473845af-30bb-4737-84a9-df11464f937e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/loyalty"
							},
							"response": []
						}
					],
					"id": "cd23b3a6-daef-45de-be3e-e3bfb6927ac3"
				},
				{
					"name": "Consumer Purchase Reason",
					"item": [
						{
							"name": "Add Consumer Purchase Reason",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"New created Purchase Reason is - \"+pm.environment.get(\"newPurchaseReason\"));\r",
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript",
										"id": "c8744cb0-5f24-4eeb-a5bd-439719fc061e"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.environment.get(\"newPurchaseReason\"));\r",
											"console.log(pm.environment.get(\"McID\"));\r",
											"\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201 - Customer has added Purchase Reasons successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "31e91ae8-b028-49ba-9450-7b54d58783b5"
									}
								}
							],
							"id": "87d2659c-3bed-418b-9be7-6f5be6dc1daf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-return-data",
										"type": "text",
										"value": "all",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"{{newPurchaseReason}}\"\r\n  }\r\n] "
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/purchaseReason"
							},
							"response": []
						},
						{
							"name": "Get Consumer Purchase Reason",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "da403e71-59e1-4095-94b1-c9820756044f"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let pr;\r",
											"for(let val of jsonData.values){\r",
											"    if(val.name==(pm.environment.get(\"newPurchaseReason\"))){\r",
											"        pr=val;\r",
											"    }\r",
											"}\r",
											"console.log(pr);\r",
											"pm.test(\"Consumer's added Purchase Reason is matching with retrieved details\", function () {\r",
											"    pm.expect(pr.name).to.eql(pm.environment.get(\"newPurchaseReason\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "16a6b7e1-63ba-478e-ba44-0f9d7b2088fe"
									}
								}
							],
							"id": "a2197f70-ceb4-42d3-a9d4-22949c259c22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/purchaseReason"
							},
							"response": []
						}
					],
					"id": "ac1d8969-0f7c-4b3d-b6ac-47e4e44920ca"
				},
				{
					"name": "Consumer Preferred Category",
					"item": [
						{
							"name": "Add Consumer Preferred Category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "b37b0347-dc52-40dd-a4d0-609dbd208669"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.environment.get(\"newPreferredCategory\"));\r",
											"console.log(pm.environment.get(\"McID\"));\r",
											"\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201 - Customer has added Preferred Category successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "8d4c5e2b-ea1f-4e80-9755-df52e435f5e5"
									}
								}
							],
							"id": "aaf64a50-8b94-4f62-b446-167447186892",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-return-data",
										"type": "text",
										"value": "all",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"{{newPreferredCategory}}\"\r\n  }\r\n] "
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/PreferredCategory"
							},
							"response": []
						},
						{
							"name": "Get Consumer Preferred Category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "364430ac-54cd-40fa-bfbc-70494ea276d4"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let pc;\r",
											"for(let val of jsonData.values){\r",
											"    if(val.name==(pm.environment.get(\"newPreferredCategory\"))){\r",
											"        pc=val;\r",
											"    }\r",
											"}\r",
											"console.log(pc);\r",
											"pm.test(\"Consumer's added Preferred Category is matching with retrieved details\", function () {\r",
											"    pm.expect(pc.name).to.eql(pm.environment.get(\"newPreferredCategory\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "a418ce61-5d1d-4a20-9aa4-f6eb4aca3dbe"
									}
								}
							],
							"id": "e8ee5fc9-e2b5-47d3-b22c-ae64ad740b81",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/PreferredCategory"
							},
							"response": []
						}
					],
					"id": "9737ead6-d3d9-4e7c-8020-d8d39f302393"
				},
				{
					"name": "Consumer Preferred Metal",
					"item": [
						{
							"name": "Add Consumer Preferred Metal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"New created Metal is - \"+pm.environment.get(\"newMetal\"));\r",
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript",
										"id": "56d1533c-931a-497d-876c-d89bf327d550"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.environment.get(\"newMetal\"));\r",
											"console.log(pm.environment.get(\"McID\"));\r",
											"\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201 - Customer has added Purchase Reasons successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "aa490004-3cdb-4db9-9d70-87b9a4371c64"
									}
								}
							],
							"id": "f282a2c1-8b48-48f5-a83d-fa142ad26e32",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-return-data",
										"type": "text",
										"value": "all",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"{{newMetal}}\"\r\n  }\r\n] "
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/preferredMetal"
							},
							"response": []
						},
						{
							"name": "Get Consumer Preferred Metal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "20e84779-c519-4343-8da9-a4ac0e242747"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - GET request is successfull\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"let pMetal;\r",
											"for(let val of jsonData.values){\r",
											"    if(val.name==(pm.environment.get(\"newMetal\"))){\r",
											"        pMetal=val;\r",
											"    }\r",
											"}\r",
											"console.log(pMetal);\r",
											"pm.test(\"Consumer's added Preferred Metal is matching with retrieved details\", function () {\r",
											"    pm.expect(pMetal.name).to.eql(pm.environment.get(\"newMetal\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "947b08cb-0ded-4932-bcd2-13bc8dacbb29"
									}
								}
							],
							"id": "bd595f2b-e375-4b0b-8ce3-0b83732d18c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/preferredMetal"
							},
							"response": []
						}
					],
					"id": "5897f58a-8a31-4e7e-a1bf-59c312d64e1d",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "aacbae3e-2f01-4d7e-a3c5-a23c1e1fae77"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e25bb955-0fa2-44fe-89f8-f2e7d5a1c743"
							}
						}
					]
				},
				{
					"name": "Birthday & myStore",
					"item": [
						{
							"name": "PATCH Birthday - Consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - UPDATE successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Birthday UPDATE validation\r",
											"let jsonData=pm.response.json();\r",
											"pm.test(\"Birthday update Validation\",function(){\r",
											"    pm.expect(jsonData.birthdayDay).to.eql(3);\r",
											"    pm.expect(jsonData.birthdayMonth).to.eql(10);\r",
											"    pm.expect(jsonData.birthdayYear).to.eql(1990);\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"id": "2213a6e2-9ed2-46b4-811a-02ace9b71a31"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "cad93088-967a-4b64-8e54-c3b2de1e3d16"
									}
								}
							],
							"id": "74630b41-7aca-4ecb-837e-bdc78a6e9220",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-return-data",
										"value": "all",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"birthdayDay\": 3,\r\n    \"birthdayMonth\": 10,\r\n    \"birthdayYear\": 1990\r\n}"
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}"
							},
							"response": []
						},
						{
							"name": "PATCH myStore - Consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - UPDATE successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"pm.test(\"Store update validation\",function(){ \r",
											"    pm.expect(jsonData.myStoreId).to.eql(\"FR10044337\");\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"id": "5fba7308-3865-4847-9611-763b98cfed46"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "235e2947-9c39-4633-ad30-21762520002e"
									}
								}
							],
							"id": "45f22cc3-0873-4dff-9538-29073e073877",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-return-data",
										"value": "all",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"myStoreId\": \"FR10044337\"//US00000027\r\n}"
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}"
							},
							"response": []
						}
					],
					"id": "4948cf89-6703-4392-9d47-07c67f08afaa"
				},
				{
					"name": "Transaction",
					"item": [
						{
							"name": "Normal Transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "066e8b83-c1b3-46ac-8c11-9bea64324623",
										"exec": [
											"var storeId = \"FR10044337\";\r",
											"pm.variables.set(\"storeId\", storeId);\r",
											"\r",
											"function setRandomTrxnID(){\r",
											"const trxnId=parseInt(Math.random()*10000000);\r",
											"console.log(trxnId);\r",
											"return trxnId;\r",
											"}\r",
											"postman.setEnvironmentVariable(\"TransactionId\",setRandomTrxnID());\r",
											"\r",
											"function setRandomTenderID(){\r",
											"const tenderId=parseInt(Math.random()*100000000);\r",
											"console.log(tenderId);\r",
											"return tenderId;\r",
											"}\r",
											"postman.setEnvironmentVariable(\"TenderId\",setRandomTenderID());\r",
											"\r",
											"var timeNow = new Date().toISOString() \r",
											"\r",
											"pm.variables.set(\"currentTime\", timeNow)\r",
											"\r",
											"var today = new Date();\r",
											"var dd = String(today.getDate()).padStart(2, '0');\r",
											"var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r",
											"var yyyy = today.getFullYear();\r",
											"\r",
											"today = yyyy+mm+dd;\r",
											"\r",
											"function setRandomOrderID(){\r",
											"trxnId =pm.environment.get(\"TransactionId\");        \r",
											"const orderId = storeId +\"_\" + trxnId + \"_\" + today;\r",
											"console.log(orderId);\r",
											"return orderId;\r",
											"}\r",
											"postman.setEnvironmentVariable(\"OrderId\",setRandomOrderID());\r",
											"\r",
											"function setRandomLineItemID(){\r",
											"const lineItemID=parseInt(Math.random()*10000000000);\r",
											"console.log(lineItemID);\r",
											"return lineItemID;\r",
											"}\r",
											"pm.environment.set(\"lineItemId\", setRandomLineItemID())\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "326048d0-7c1d-42ee-8dd8-468bdfcba64b",
										"exec": [
											"eval(postman.getGlobalVariable(\"describe-it-test-script\"));\r",
											"\r",
											"pm.test(\"Status code is 201 - New transaction successfully completed\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData=pm.response.json();\r",
											"var pointsAwarded=jsonData.pointsAwarded[0].points;\r",
											"pm.test(\"Simple Transaction - Points accural validation successfull : \"+pointsAwarded+\" points is awarded to consumer\",function(){\r",
											"    pm.expect(pointsAwarded).to.eql(90);\r",
											"});\r",
											"\r",
											"testResults = function(propertyName, propertyValue) {\r",
											"        it(\"property \" + propertyName + \" values must match\", function () {     \r",
											"            expect(jsonData[propertyName]).toEql(propertyValue);\r",
											"        });\r",
											"    };\r",
											"\r",
											" //Setting Trasaction date for future validations\r",
											"\r",
											"    var transactionDate =  jsonData.transactionDate;   \r",
											"    var date = new Date(transactionDate);\r",
											"    console.log(transactionDate);\r",
											"    let transactionDateStr = date.toUTCString();\r",
											"    console.log(\"Timestamp of the Purchase Transaction - \", transactionDateStr);    \r",
											"    pm.environment.set(\"transactionTimeStamp\", transactionDateStr);\r",
											"\r",
											"    \r",
											"// Transaction Details validation\r",
											"\r",
											"    // testResults(\"masterConsumerId\", pm.environment.get(\"McID\")); //Its needs to be active while the issues will be fixed by dev team\r",
											"    testResults(\"transactionId\", pm.environment.get(\"TransactionId\"));\r",
											"    testResults(\"orderId\",  pm.environment.get(\"OrderId\"));\r",
											"    testResults(\"storeId\", pm.variables.get(\"storeId\"));\r",
											"    testResults(\"shippingAmount\", 10);\r",
											"    testResults(\"taxAmount\", 10);\r",
											"    testResults(\"transactionAmount\", 100);\r",
											"\r",
											"testResults2 = function(propertyName, propertyValue) {\r",
											"        it(\"property \" + propertyName + \" values must match\", function () {     \r",
											"            expect(propertyName).toEql(propertyValue);\r",
											"        });\r",
											"    };\r",
											"\r",
											"// LineItems Validations\r",
											"\r",
											"    testResults2(jsonData.lineItems[0].lineItemId,  pm.environment.get(\"lineItemId\"));\r",
											"    testResults2(jsonData.lineItems[0].memberCouponId, null);\r",
											"    testResults2(jsonData.lineItems[0].salesAmount, 90.0);\r",
											"    testResults2(jsonData.lineItems[0].retailAmount, 120.0);\r",
											"    testResults2(jsonData.lineItems[0].salesAmount, 90.0);    \r",
											"    testResults2(jsonData.lineItems[0].unitAmount, 90.0);\r",
											"    testResults2(jsonData.lineItems[0].taxAmount, 10.0);\r",
											"    testResults2(jsonData.lineItems[0].discountAmount, 20.0);\r",
											"    testResults2(jsonData.lineItems[0].quantity, 1);\r",
											"    testResults2(jsonData.lineItems[0].lineItemType, \"Purchase\");\r",
											"\r",
											"// Awarded Points Validations\r",
											"\r",
											"    testResults2(jsonData.pointsAwarded[0].points, 90.0);\r",
											"    testResults2(jsonData.pointsAwarded[0].pointEvent, \"PurchaseActivity\");\r",
											"    testResults2(jsonData.pointsAwarded[0].pointType, \"BasePoints\");\r",
											"    testResults2(jsonData.pointsAwarded[0].ruleName, \"BasePoints_OnPurchase\");\r",
											"    testResults2(jsonData.pointsAwarded[0].message, \"90 points put on hold.\");\r",
											"    testResults2(jsonData.pointsAwarded[0].negativeBalanceOffset, 0.0);\r",
											"    testResults2(jsonData.pointsAwarded[0].mode, \"Real\");\r",
											"    testResults2(jsonData.pointsAwarded[0].description, null);\r",
											"\r",
											"// Tender/ Payment type validations\r",
											"\r",
											"    testResults2(jsonData.tenders[0].paymentType, \"Cash\");\r",
											"    // testResults2(jsonData.tenders[0].tenderAmount, 100.0);\r",
											"   \r",
											"pm.environment.unset(\"lineItemId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "933cad24-768e-4f50-9a02-2a7b69d9a965",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "x-return-data",
										"value": "all",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderId\": \"{{OrderId}}\",\r\n    \"transactionId\": \"{{TransactionId}}\",\r\n    \"transactionDate\": \"{{currentTime}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"shippingAmount\": 10,\r\n    \"taxAmount\": 10,\r\n    \"transactionAmount\": 100, // transactionAmount = salesAmount + shippingAmount\r\n    \"loyaltyLineItems\": [\r\n        {\r\n            \"lineItemId\": \"{{lineItemId}}\",\r\n            \"globalProductId\": \"150100-045\",\r\n            \"retailAmount\": 100.0, \r\n            \"salesAmount\": 90.0, // SaleAmount = RetailAmount - discountAmount\r\n            \"unitAmount\": 90.0,\r\n            \"discountAmount\": 20.0,\r\n            \"taxAmount\": 10,\r\n            \"quantity\": 1,\r\n            \"lineItemType\": \"Purchase\"\r\n        }\r\n    ],\r\n    \"tenders\": [\r\n        {\r\n            \"paymentType\": \"Cash\",\r\n            \"tenderAmount\": 100 // tenderAmount = transactionAmount\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/loyalty/transaction"
							},
							"response": []
						}
					],
					"id": "02ab85b2-bf21-4325-be13-18b7f02f47c9"
				},
				{
					"name": "Tier Up",
					"item": [
						{
							"name": "Get Consumer Loyalty Points and Tiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dabdbb22-2362-4cb0-9b4e-e35b588ddba9",
										"exec": [
											"// eval(postman.getGlobalVariable(\"describe-it-test-script\"));\r",
											"\r",
											"// const response=pm.response.json();\r",
											"\r",
											"// describe(\"After Enrollment in Loyalty, response\", function() {\r",
											"//     it(\"must return 200 status code\", function() {\r",
											"//        expect(responseCode.code).toEql(200);\r",
											"//     });\r",
											"//     it(\"must be a valid JSON\", function () {\r",
											"//         responseJSON = JSON.parse(responseBody);\r",
											"//         expect(typeof responseJSON).toBe(\"object\");\r",
											"//     });    \r",
											"//     it(\"property masterConsumerId must have a value\", function () {\r",
											"//         expect(responseJSON.masterConsumerId).toBeOk();\r",
											"//     });   \r",
											"//     it(\"property email must have a value\", function () {\r",
											"//         expect(responseJSON.email).toBeOk();\r",
											"//     }); \r",
											"  \r",
											"    \r",
											"//         testResults = function(propertyName, propertyValue) {\r",
											"//         it(\"property \" + propertyName + \" values must match\", function () {\r",
											"//             expect(responseJSON[propertyName]).toEql(propertyValue);\r",
											"//         });\r",
											"//     };\r",
											"\r",
											"// //Validate Member Details \r",
											"\r",
											"//     testResults(\"masterConsumerId\", pm.environment.get(\"McID\"));\r",
											"//     testResults(\"memberStatus\", \"Active\");\r",
											"//     testResults(\"country\", \"FR\");\r",
											"//     testResults(\"firstName\", \"bob\");\r",
											"//     testResults(\"lastName\", \"smith\");\r",
											"//     testResults(\"email\", pm.environment.get(\"newConsumerEmail\"));\r",
											"\r",
											"// // Validate that data capture questions is answered\r",
											"//     testResults(\"consumerType\", pm.environment.get(\"newPurchaseReason\"));\r",
											"//     testResults(\"metalPreference\", pm.environment.get(\"newMetal\"));\r",
											"//     testResults(\"categoryPreference\", pm.environment.get(\"newPreferredCategory\"));\r",
											"//     testResults(\"birthdayDay\", 3);;\r",
											"//     testResults(\"birthdayMonth\", 10);\r",
											"//     testResults(\"birthdayYear\", 1990);\r",
											"//     testResults(\"myStoreId\", \"FR10044337\");\r",
											"  \r",
											"//  });   \r",
											"\r",
											"//         var enrollDate = response.enrollDate;\r",
											"//         // console.log(enrollDate);\r",
											"//         // var dateStr = JSON.parse(response.enrollDate);  \r",
											"//         // console.log(dateStr);\r",
											"//         var date = new Date(enrollDate);\r",
											"//         var dateStr = date.toUTCString();\r",
											"//         console.log(dateStr);\r",
											"\r",
											"//     //Validate that enrollment timestamp is matching with T&C acceptance timestamp\r",
											"\r",
											"//     let enrollTimeStamp = pm.environment.get(\"enrollTimeStamp\");\r",
											"//     console.log(enrollTimeStamp);\r",
											"    \r",
											"//     pm.test (\"Enrollment Timestamp Validation - \"+ dateStr, function () {\r",
											"//     pm.expect((dateStr).match(enrollTimeStamp));\r",
											"//    } )\r",
											"\r",
											"\r",
											"// testResults2 = function(propertyName, propertyValue) {\r",
											"//         it(\"property \" + propertyName + \" values must match\", function () {     \r",
											"//             expect(propertyName).toEql(propertyValue);\r",
											"//         });\r",
											"//     };\r",
											"\r",
											"// //Tier Level and Account details validation\r",
											"\r",
											"//     let account= response.accountBalance;\r",
											"\r",
											"//         it(\"Account Balance should be an Object\", function () {\r",
											"//             expect(typeof account).toBe(\"object\");\r",
											"//         }); \r",
											"\r",
											"//         testResults2(response.accountBalance.tierLevel, \"Silver\");\r",
											"//         testResults2(response.accountBalance.pendingPoints, 90.0);\r",
											"//         testResults2(response.accountBalance.availablePoints, 0.0);\r",
											"//         testResults2(response.accountBalance.conversionAmount, 0.00);\r",
											"\r",
											"// //Voucher validation for PINK member\r",
											"\r",
											"// let voucherid,expDt, issueDt, redeemDate,usesLeft,pointEarningMul, discPercent, isActive, validity, applicability;\r",
											"\r",
											"//         for(let val of response.vouchers){\r",
											"//             if(val.name == \"FreeJewelryCleaningInStore_FR\"){\r",
											"//                     voucherid=val.id;\r",
											"//                     console.log(\"FreeJewelryCleaningInStore voucher is available -> \", voucherid);\r",
											"                                       \r",
											"//                     pm.test(\"FreeJewelryCleaningInStore is valid for Lifetime\", function () {\r",
											"//                         expDt=val.expiryDate;\r",
											"                    \r",
											"//                         expDt= new Date(val.expiryDate);\r",
											"//                         expYear=expDt.getFullYear();\r",
											"//                         console.log (expYear);\r",
											"\r",
											"//                         pm.expect(expYear).to.be.at.least(2099);            \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore is not yet redeemed for a PINK Consumer\", function () {\r",
											"//                         redeemDate =val.redeemDate;\r",
											"//                         pm.expect(redeemDate).to.eql(null);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore can be used Multiple Times - Uses Left Validation\", function () {\r",
											"//                         usesLeft =val.usesLeft;\r",
											"//                         pm.expect(usesLeft).to.eql(999999999);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore should Active after Enrollment\", function () {\r",
											"//                         isActive =val.isActive;\r",
											"//                         pm.expect(isActive).to.eql(true);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"FreeJewelryCleaningInStore should applicable at stores only\", function () {\r",
											"//                         applicability =val.applicableIn;\r",
											"//                         pm.expect(applicability).to.eql(\"InStore\");              \r",
											"//                     });\r",
											"//             };\r",
											"//         };\r",
											"\r",
											"// //Voucher Validation for Silver Members\r",
											"\r",
											"// for(let val of response.vouchers){\r",
											"//             if(val.name == \"50%OffJewelryCleaningKit_FR\"){\r",
											"//                     voucherid=val.id;\r",
											"//                     console.log(\"50%OffJewelryCleaningKit voucher is available -> \", voucherid);\r",
											"                                       \r",
											"//                     pm.test(\"50%OffJewelryCleaningKit is valid for Lifetime\", function () {\r",
											"//                         expDt=val.expiryDate;\r",
											"                    \r",
											"//                         expDt= new Date(val.expiryDate);\r",
											"//                         expYear=expDt.getFullYear();\r",
											"//                         console.log (expYear);\r",
											"\r",
											"//                         pm.expect(expYear).to.be.at.least(2099);                \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"50%OffJewelryCleaningKit is not yet redeemed for a SILVER Consumer\", function () {\r",
											"//                         redeemDate =val.redeemDate;\r",
											"//                         pm.expect(redeemDate).to.eql(null);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"50%OffJewelryCleaningKit can be used Multiple Times - Uses Left Validation\", function () {\r",
											"//                         usesLeft =val.usesLeft;\r",
											"//                         pm.expect(usesLeft).to.eql(999999999);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"50%OffJewelryCleaningKit should Active after moving to SILVER Tier\", function () {\r",
											"//                         isActive =val.isActive;\r",
											"//                         pm.expect(isActive).to.eql(true);              \r",
											"//                     });\r",
											"\r",
											"//                     pm.test(\"50%OffJewelryCleaningKit should applicable at stores only\", function () {\r",
											"//                         applicability =val.applicableIn;\r",
											"//                         pm.expect(applicability).to.eql(\"Both\");              \r",
											"//                     });\r",
											"//             };\r",
											"\r",
											"// };\r",
											"\r",
											"// // Points Array Validation\r",
											"// //Validate that transaction related points details present in points array\r",
											"\r",
											"// let pointsAllocationTime, transactionTimeStamp;\r",
											"// transactionTimeStamp = pm.environment.get(\"transactionTimeStamp\");\r",
											"// for(let val of response.points){\r",
											"//             if(val.orderId == pm.environment.get (\"OrderId\")){\r",
											"\r",
											"//                 testResults2(response.points[0].points, 90.0);\r",
											"//                 testResults2(response.points[0].pointsAccrualInfo, \"Basic Transactional Accrual\");\r",
											"//                 testResults2(response.points[0].pointsTransactionType, \"Credit\");\r",
											"//                 testResults2(response.points[0].orderId, pm.environment.get (\"OrderId\"));\r",
											"//                 testResults2(response.points[0].pointsReleaseHoldDate, null);\r",
											"//                 testResults2(response.points[0].onHold, true);\r",
											"\r",
											"//                 pointsAllocationTime = val.pointsChangedDate;\r",
											"\r",
											"//                 var date = new Date(pointsAllocationTime);\r",
											"//                 var dateStr = date.toUTCString();\r",
											"\r",
											"//                 pm.test (\"Enrollment Timestamp Validation - \"+ dateStr, function () {\r",
											"//                     pm.expect((dateStr).match(transactionTimeStamp));\r",
											"//                 } );\r",
											"//             };\r",
											"//   };\r",
											"\r",
											"// // Transaction Array Validation\r",
											"// //Validate that transaction related details present in Transaction array\r",
											"\r",
											"// let transactionDate;\r",
											"// for(let val of response.transactions){\r",
											"//             if(val.orderId == pm.environment.get (\"OrderId\")){\r",
											"\r",
											"//                 testResults2(response.transactions[0].transactionId, pm.environment.get (\"TransactionId\"));\r",
											"//                 testResults2(response.transactions[0].orderId, pm.environment.get (\"OrderId\"));\r",
											"//                 testResults2(response.transactions[0].storeId, \"FR10044337\");\r",
											"//                 testResults2(response.transactions[0].transactionAmount, 100.0);\r",
											"//                 testResults2(response.transactions[0].pointsHistory[0].points, 90.0);\r",
											"//                 testResults2(response.transactions[0].pointsHistory[0].pointsAccrualType, \"PurchaseActivity\");\r",
											"//                 testResults2(response.transactions[0].pointsHistory[0].pointsTransactionType, \"Credit\");\r",
											"\r",
											"//                 transactionDate = val.transactionDate;\r",
											"\r",
											"//                 var date = new Date(transactionDate);\r",
											"//                 var dateStr = date.toUTCString();\r",
											"\r",
											"//                 pm.test (\"Transaction Timestamp Validation - \"+ dateStr, function () {\r",
											"//                     pm.expect((dateStr).match(transactionTimeStamp));\r",
											"//                 } );\r",
											"\r",
											"//             };\r",
											"//   };\r",
											"\r",
											"\r",
											"// // Member Profile available arrays validation after Enrollment\r",
											"\r",
											"//     pm.test(\"Validate Voucher Array is not empty\", () => {\r",
											"//         pm.expect(response.vouchers).not.to.be.empty;\r",
											"//     });\r",
											"//     pm.test(\"Validate Transaction array for new enrolled member after a single transaction \", () => {\r",
											"//         pm.expect(response.transactions).not.to.be.empty;\r",
											"//     });\r",
											"//     pm.test(\"Validate Points array for new enrolled member after a single transaction\", () => {\r",
											"//         pm.expect(response.points).not.to.be.empty;\r",
											"//     });\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "655a25d8-6cd6-4d9f-8db5-7b0925515ada",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5ca6b948-4e98-406c-a125-d9397047ca72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}/loyalty"
							},
							"response": []
						}
					],
					"id": "bb8bda13-9fc3-49a9-87a4-3b737b831c23"
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete Consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 - New Consumer Deleted\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "876692c9-496a-438d-be46-a888dc65deb2"
									}
								}
							],
							"id": "c2e1fd37-83ac-4072-bc7a-83cd1025e6ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{api_url}}/api/v{{ApiVersion}}/consumer/{{McID}}"
							},
							"response": []
						}
					],
					"id": "f0c50fda-2161-405e-852f-111970eaba92"
				}
			],
			"id": "42c7c111-0977-4509-be87-f2b996e26511"
		},
		{
			"name": "Saswata",
			"item": [],
			"id": "39740185-6ce5-400b-bf08-8bce20f0e7c8"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "d9d1168e-d6df-40b0-8d0c-19c284de4b51"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "accd0b48-ede0-4e06-800f-32dd0169c222"
			}
		}
	]
}